
[ParametersDescription("матожидание и дисперсию соответственно")]
class NormalDistribution : Distribution
{
    public override long Id { get; set; }
    public override int ParamNum { get => 2; }
    public override string Name => "Нормальное";
    public override double[] distParams { get; set; }

    [NameMethod("матожидание")]
    public double Mean()
    {
        return distParams[0];
    }

    [NameMethod("генерация случайной величины")]
    public double Generate()//преобразование Бокса-Мюллера
    {
        var rnd = new Random();
        var u = rnd.NextDouble();
        var v = rnd.NextDouble();
        var x = Math.Sqrt(-2 * Math.Log(u)) * Math.Cos(2 * Math.PI * v);
        return x * distParams[1] + distParams[0];
    }

    public override double Density(double x)
        => (1 / (distParams[1] * Math.Sqrt(2 * Math.PI)))
        * Math.Exp(-Math.Pow(x - distParams[0], 2.0) / (2 * Math.Pow(distParams[1], 2)));

    public override double ProbabilityFunction(double x)
    {
        if (x < distParams[0])
        {
            return 0.5 - MathMethods.Integral(x, distParams[0], Density);
        }
        if (x > distParams[0])
        {
            return 0.5 + MathMethods.Integral(distParams[0], x, Density);
        }
        return 0.5;
    }

    public override string CheckParamsValid(params double[] parametres)
    {
        var answer = BaseParamsCheking(parametres);

        if (0 > parametres[1])
            answer = "Параметр дисперсии не может быть отрицательным";

        return answer;
    }
}
return typeof(NormalDistribution);
